#include <bitset>
#include <cmath>
#include <fstream>
#include <iostream>
using namespace std;

#define uint unsigned int

const int count = 1000;

void get_data(uint *data, uint mode);
uint calculate_bits(uint num);                                   // 返回一个整数的位数
uint calculate_space(uint *data);                                // 计算编码空间
uint set_high_bits0(uint sub, int num);                          // 数字高num位置0
uint get_high_bits(uint sub, int num);                           // 获取数字高num位
uint get_bits(uint sub, int low, int high);                      // 获取数字从low位到high位的数字


int main() {
    return 0;
}

void get_data(uint *data, uint mode) {
    // data储存原始数据的容器
    // mode表示读取数据的模式,1:求整数之间的gap值;2:直接读取整数;
    ifstream load_data("data.txt");
    uint temp = 0, i = 0;
    switch(mode) {
        case 1: {
            while (load_data >> temp)
            {
                data[i++] = temp;
            }
            break;
        }  
        case 2: {
            i++;
            uint pre = 0;
            load_data >> temp;
            data[0] = temp;
            pre = temp;
            while (load_data >> temp)
            {
                data[i++] = temp - pre;
                pre = temp;
            }
            break;
        }
        default :
            cout << "invalid mode" << endl;
    }
    load_data.close();
}

uint calculate_bits(uint num) {
    // 计算一个数的二进制位数
    return (uint)floor(log(num) / log(2)) + 1;
}

uint calculate_space(uint *data) {
    uint sum_space = 0;
    for (int i = 0; i < count; ++i) {
        sum_space += calculate_bits(data[i]);
    }
    return (uint) ceil((float) sum_space / 32.0);
}

uint set_high_bits0(uint sub, int num) {
    uint temp = (1U << ((int)floor(log(sub) / log(2)) + 1)) - 1;
    temp = temp >> num;
    return sub & temp;
}

uint get_high_bits(uint sub, int num) {
    uint length_shift = (int)floor(log(sub) / log(2)) + 1 - num;
    return sub >> length_shift;
}

uint get_bits(uint sub, int low, int high) {
    // 获取整数从low位到high位
    uint low_bits = (1U << (low - 1)) - 1;
    uint high_bits = (1U << high) - 1;
    uint temp = high_bits - low_bits;
    sub &= temp;
    return sub >> (low - 1);
}